from brainxcan.snmk.snmk_helper import *

# initialization
check_required_args(config)
check_datadir(config)
fill_idp_type(config)
fill_model_type(config)
fill_patterns(config)
fill_bxcan_null(config)
spearman_cutoff = fill_spearman_cutoff(config)
args_signif_criteria, signif_max_idps = fill_sbxcan_signif_criteria(config)
args_idp_cols, idp_weight_t1, idp_weight_dmri = fill_sbxcan_idp_weight(config)
args_geno_cov, geno_cov_files = fill_sbxcan_geno_cov(config)
ld_clump_yaml = fill_ld_clump_yaml(config)
params_gwas_idp, gwas_idp_files = fill_gwas_idp(config)
args_snp_bim, snp_bim_files = fill_snp_bim(config)
args_mr_ld_panel, mr_ld_panel_files = fill_mr_ld_panel(config)
fill_exe(config)
bxcan_vis_datadir = fill_bxcan_vis_datadir(config)
bxcan_idp_meta, bxcan_color_code = fill_bxcan_report_data(config)
args_bxcan_region_vis = fill_bxcan_region_vis(config)
args_bxcan_null_t1, args_bxcan_null_dmri =  fill_bxcan_null_args(config)
args_merge_bxcan_vc = fill_merge_bxcan_vcz_args(config)
args_col_meta_sbxcan, args_col_meta_mr = fill_gwas_col_meta(config)
fill_pval_col(config)
fill_correction_factor(config)

# output files
sbxcan = '{outdir}/{prefix}.sbrainxcan.csv'.format(**config)
sbxcan_vis = [
    '{outdir}/{prefix}.vis.T1.pdf'.format(**config),
    '{outdir}/{prefix}.vis.dMRI.pdf'.format(**config)
]
mr_vis = [
    '{outdir}/{prefix}_files/MR_results/{idp_name}.MR_vis.pdf', 
    '{outdir}/{prefix}_files/MR_results/{idp_name}.MR_sumstats.tsv'
]
sbxcan_report = '{outdir}/{prefix}.report.html'.format(**config)


rule sbxcan_t1:
    input:
        config['gwas'],
        idp_weight_t1[0],
        geno_cov_files,
        idp_weight_t1[1]
    params:
        '{outdir}/{prefix}.sbrainxcan_t1'
    output:
        temp('{outdir}/{prefix}.sbrainxcan_t1.csv')
    log:
        '{outdir}/{prefix}_files/logs/sbrainxcan_t1.log'
    shell:
        'export PYTHONPATH={config[brainxcan_path]}:${{PYTHONPATH:-}}; \
         {config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/sbxcan/run_sbrainxcan.py \
           --genotype_covariance {args_geno_cov} \
           --gwas {input[0]} {args_col_meta_sbxcan} \
           --idp_weight {input[1]} {args_idp_cols} \
           --spearman_cutoff {spearman_cutoff} \
           {args_bxcan_null_t1} \
           --output_prefix {params[0]} > {log} 2>&1'

rule sbxcan_dmri:
    input:
        config['gwas'],
        idp_weight_dmri[0],
        geno_cov_files,
        idp_weight_dmri[1]
    params:
        '{outdir}/{prefix}.sbrainxcan_dmri'
    output:
        temp('{outdir}/{prefix}.sbrainxcan_dmri.csv')
    log:
        '{outdir}/{prefix}_files/logs/sbrainxcan_dmri.log'
    shell:
        'export PYTHONPATH={config[brainxcan_path]}:${{PYTHONPATH:-}}; \
         {config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/sbxcan/run_sbrainxcan.py \
           --genotype_covariance {args_geno_cov} \
           --gwas {input[0]} {args_col_meta_sbxcan} \
           --idp_weight {input[1]} {args_idp_cols} \
           --spearman_cutoff {spearman_cutoff} \
           {args_bxcan_null_dmri} \
           --output_prefix {params[0]} > {log} 2>&1'

rule sbxcan_merge:
    input:
        '{outdir}/{prefix}.sbrainxcan_dmri.csv',
        '{outdir}/{prefix}.sbrainxcan_t1.csv'
    params:
        '{outdir}/{prefix}.sbrainxcan'
    output:
        '{outdir}/{prefix}.sbrainxcan.csv'
    log:
        '{outdir}/{prefix}_files/logs/sbxcan_merge.log'
    shell:
        'export PYTHONPATH={config[brainxcan_path]}:${{PYTHONPATH:-}}; \
        {config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/snmk/merge_bxcan.py \
           --dmri {input[0]} \
           --t1 {input[1]} \
           --idp_meta_file {bxcan_idp_meta} \
           --pval_col {config[pval_col]} \
           --correction_factor_emp {config[correction_factor_emp]} \
           --correction_factor_perm {config[correction_factor_perm]} \
           {args_merge_bxcan_vc} \
           --output_prefix {params[0]} > {log} 2>&1'

checkpoint sbxcan_signif:
    input:
        '{outdir}/{prefix}.sbrainxcan.csv'
    output:
        temp(directory('{outdir}/{prefix}_files/.tmp_signif'))
    log:
        '{outdir}/{prefix}_files/logs/sbxcan_signif.log'
    shell:
        'mkdir -p {output[0]}; \
         {config[python_exe]} \
           {config[brainxcan_path]}/brainxcan/snmk/grab_signif.py \
           {args_signif_criteria} \
           --sbxcan {input[0]} \
           --pval_col {config[pval_col]} \
           --outdir {output[0]} > {log} 2>&1'

rule mr:
    input:
        ld = ld_clump_yaml,
        gwas = config['gwas'],
        idp_flag = '{outdir}/{prefix}_files/.tmp_signif/{idp_modality}_{idp_code}.txt',
        idp = gwas_idp_files,
        snp = snp_bim_files
    output:
        '{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR.rds'
    log:
        '{outdir}/{prefix}_files/logs/{idp_modality}_{idp_code}.mr.log'
    params:
        gwas_idp = params_gwas_idp,
    shell:
        'export R_MR_SRC={config[brainxcan_path]}/brainxcan/mr; \
          {config[rscript_exe]} \
          {config[brainxcan_path]}/brainxcan/mr/run_mr_local.R \
          --idp_gwas_pattern {params.gwas_idp} \
          --snp_meta {args_snp_bim} \
          --ld_clump_yaml {input.ld} \
          --gwas_file {input.gwas} \
          --gwas_key_val_pairs {args_col_meta_mr} \
          --plink_exe {config[plink_exe]} \
          --bfile_prefix {args_mr_ld_panel} \
          --output {output[0]} > {log} 2>&1'

rule mr_vis:
    input:
        '{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR.rds',
        '{outdir}/{prefix}_files/.tmp_signif/{idp_modality}_{idp_code}.txt'
    output:
        '{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR_vis.pdf',
        '{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR_sumstats.tsv'
    log:
        '{outdir}/{prefix}_files/logs/{idp_modality}_{idp_code}.mr_vis.log'
    shell:
        'export R_VIS_SRC={config[brainxcan_path]}/brainxcan/vis; \
          {config[rscript_exe]} \
          {config[brainxcan_path]}/brainxcan/vis/run_mr_vis.R \
          --mr_rds {input[0]} \
          --bxcan {input[1]} \
          --output_plot {output[0]} \
          --bxcan_pval_col {config[pval_col]} \
          --output_table {output[1]} > {log} 2>&1'

rule sbxcan_vis:
    input:
        '{outdir}/{prefix}.sbrainxcan.csv'
    output:
        '{outdir}/{prefix}.vis.dMRI.pdf',
        '{outdir}/{prefix}.vis.T1.pdf'
    params:
        '{outdir}/{prefix}.vis'
    log:
        '{outdir}/{prefix}_files/logs/sbxcan_vis.log'
    shell:
        'export R_VIS_SRC={config[brainxcan_path]}/brainxcan/vis; \
         {config[rscript_exe]} \
           {config[brainxcan_path]}/brainxcan/vis/run_bxcan_vis.R \
           --brainxcan {input[0]} \
           --datadir {bxcan_vis_datadir} \
           {args_bxcan_region_vis} \
           --pval_col {config[pval_col]} \
           --output_prefix {params[0]} > {log} 2>&1'

rule sbxcan_report:
    input:
        '{outdir}/{prefix}.sbrainxcan.csv',
        '{outdir}/{prefix}.vis.dMRI.pdf',
        '{outdir}/{prefix}.vis.T1.pdf',
        lambda wildcards: aggregate_chkpnt(wildcards)
    params:
        '{prefix}'
    output:
        '{outdir}/{prefix}.report.html'
    log:
        '{outdir}/{prefix}_files/logs/sbxcan_report.log'
    shell:
        '{config[rscript_exe]} \
           {config[brainxcan_path]}/brainxcan/vis/report_compilation.R \
           --input_prefix {params[0]} \
           --color_code_yaml {bxcan_color_code} \
           --rlib {config[brainxcan_path]}/brainxcan/vis/report_helper.R \
           --rmd_template {config[brainxcan_path]}/brainxcan/vis/report_template.Rmd \
           --phenotype_name {wildcards.prefix} \
           --ntop {signif_max_idps} \
           --bxcan_pval_col {config[pval_col]} \
           --fdr_cutoff {config[fdr_cutoff]} \
           --output_html {output[0]} > {log} 2>&1'
        

def aggregate_chkpnt(wildcards, config=None):
    '''
    aggregate the files generated by checkpoint sbxcan_signif
    '''
    if config is not None:
        checkpoint_output = checkpoints.sbxcan_signif.get(**wildcards, **config).output[0]
        wc_ = glob_wildcards('{outdir}/{prefix}_files/.tmp_signif/{{idp_modality}}_{{idp_code}}.txt'.format(**config))
        files1 = expand(
            os.path.join('{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR_vis.pdf'),
            zip,
            # **config,
            outdir=[ config['outdir'] for i in range(len(wc_.idp_modality)) ],
            prefix=[ config['prefix'] for i in range(len(wc_.idp_modality)) ],
            idp_modality=wc_.idp_modality,
            idp_code=wc_.idp_code
        )
        files2 = expand(
            os.path.join('{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR_sumstats.tsv'),
            zip,
            # **config,
            outdir=[ config['outdir'] for i in range(len(wc_.idp_modality)) ],
            prefix=[ config['prefix'] for i in range(len(wc_.idp_modality)) ],
            idp_modality=wc_.idp_modality,
            idp_code=wc_.idp_code
        )
        return files1 + files2
    else:
        checkpoint_output = checkpoints.sbxcan_signif.get(**wildcards).output[0]
        wc_ = glob_wildcards('{outdir}/{prefix}_files/.tmp_signif/{{idp_modality}}_{{idp_code}}.txt'.format(**wildcards))
        files1 = expand(
            os.path.join('{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR_vis.pdf'),
            zip,
            # **config,
            outdir=[ wildcards['outdir'] for i in range(len(wc_.idp_modality)) ],
            prefix=[ wildcards['prefix'] for i in range(len(wc_.idp_modality)) ],
            idp_modality=wc_.idp_modality,
            idp_code=wc_.idp_code
        )
        files2 = expand(
            os.path.join('{outdir}/{prefix}_files/MR_results/{idp_modality}_{idp_code}.MR_sumstats.tsv'),
            zip,
            # **config,
            outdir=[ wildcards['outdir'] for i in range(len(wc_.idp_modality)) ],
            prefix=[ wildcards['prefix'] for i in range(len(wc_.idp_modality)) ],
            idp_modality=wc_.idp_modality,
            idp_code=wc_.idp_code
        )
        return files1 + files2


rule SBrainXcan:
    input:
        sbxcan,
        sbxcan_vis,
        lambda wildcards: aggregate_chkpnt(wildcards, config),
        sbxcan_report

rule SBrainXcanOnly:
    input:
        sbxcan

rule SBrainXcanAndVis:
    input:
        sbxcan_vis

rule SBrainXcanAndMR:
    input:
        sbxcan,
        # '{outdir}/{prefix}.MR_output.txt'.format(**config)
        lambda wildcards: aggregate_chkpnt(wildcards, config)
